[
    [20, 0, 0], [12.4597, 7.19358, 0], [5.75093, 9.9609, 0], [0, 14.3872, 0], [-10, 17.3205, 0], [-12.4597, 7.19358, 0], [-11.5019, 0, 0], [-12.4597, -7.19358, 0], [-10, -17.3205, 0], [0, -14.3872, 0], [5.75093, -9.9609, 0], [12.4597, -7.19358, 0],
    [20, 0, 6.49719], [12.4597, 7.19358, 8.37411], [5.75093, 9.9609, 9.05013], [0, 14.3872, 8.37411], [-10, 17.3205, 6.49719], [-12.4597, 7.19358, 8.37411], [-11.5019, 0, 9.05013], [-12.4597, -7.19358, 8.37411], [-10, -17.3205, 6.49719], [0, -14.3872, 8.37411], [5.75093, -9.9609, 9.05013], [12.4597, -7.19358, 8.37411],
    [20, 0, 6.49719], [12.4597, 7.19358, 8.37411], [5.75093, 9.9609, 9.05013], [0, 14.3872, 8.37411], [-10, 17.3205, 6.49719], [-12.4597, 7.19358, 8.37411], [-11.5019, 0, 9.05013], [-12.4597, -7.19358, 8.37411], [-10, -17.3205, 6.49719], [0, -14.3872, 8.37411], [5.75093, -9.9609, 9.05013], [12.4597, -7.19358, 8.37411],
    [19.4142, 0, 7.9114], [12.0947, 6.98289, 9.78832], [5.58249, 9.66915, 10.4643], [0, 13.9658, 9.78832], [-9.70711, 16.8132, 7.9114], [-12.0947, 6.98289, 9.78832], [-11.165, 0, 10.4643], [-12.0947, -6.98289, 9.78832], [-9.70711, -16.8132, 7.9114], [0, -13.9658, 9.78832], [5.58249, -9.66915, 10.4643], [12.0947, -6.98289, 9.78832],
    [18, 0, 8.49719], [11.2137, 6.47423, 10.3741], [5.17583, 8.96481, 11.0501], [0, 12.9485, 10.3741], [-9, 15.5885, 8.49719], [-11.2137, 6.47423, 10.3741], [-10.3517, 0, 11.0501], [-11.2137, -6.47423, 10.3741], [-9, -15.5885, 8.49719], [0, -12.9485, 10.3741], [5.17583, -8.96481, 11.0501], [11.2137, -6.47423, 10.3741],
    [0, 0, 15]
]

[
    [20, 0, 0], [12.4597, 7.19358, 0], [5.75093, 9.9609, 0], [0, 14.3872, 0], [-10, 17.3205, 0], [-12.4597, 7.19358, 0], [-11.5019, 0, 0], [-12.4597, -7.19358, 0], [-10, -17.3205, 0], [0, -14.3872, 0], [5.75093, -9.9609, 0], [12.4597, -7.19358, 0],
    [20, 0, 6.49719], [12.4597, 7.19358, 8.37411], [5.75093, 9.9609, 9.05013], [0, 14.3872, 8.37411], [-10, 17.3205, 6.49719], [-12.4597, 7.19358, 8.37411], [-11.5019, 0, 9.05013], [-12.4597, -7.19358, 8.37411], [-10, -17.3205, 6.49719], [0, -14.3872, 8.37411], [5.75093, -9.9609, 9.05013], [12.4597, -7.19358, 8.37411],
    [19.4142, 0, 7.9114], [12.0947, 6.98289, 9.78832], [5.58249, 9.66915, 10.4643], [0, 13.9658, 9.78832], [-9.70711, 16.8132, 7.9114], [-12.0947, 6.98289, 9.78832], [-11.165, 0, 10.4643], [-12.0947, -6.98289, 9.78832], [-9.70711, -16.8132, 7.9114], [0, -13.9658, 9.78832], [5.58249, -9.66915, 10.4643], [12.0947, -6.98289, 9.78832],
    [18, 0, 8.49719], [11.2137, 6.47423, 10.3741], [5.17583, 8.96481, 11.0501], [0, 12.9485, 10.3741], [-9, 15.5885, 8.49719], [-11.2137, 6.47423, 10.3741], [-10.3517, 0, 11.0501], [-11.2137, -6.47423, 10.3741], [-9, -15.5885, 8.49719], [0, -12.9485, 10.3741], [5.17583, -8.96481, 11.0501], [11.2137, -6.47423, 10.3741],
    [0, 0, 15]
]

[
    [20, 0, 0], [12.4597, 7.19358, 0], [5.75093, 9.9609, 0], [0, 14.3872, 0], [-10, 17.3205, 0], [-12.4597, 7.19358, 0], [-11.5019, 0, 0], [-12.4597, -7.19358, 0], [-10, -17.3205, 0], [0, -14.3872, 0], [5.75093, -9.9609, 0], [12.4597, -7.19358, 0],
    [20, 0, 6.49719], [12.4597, 7.19358, 8.37411], [5.75093, 9.9609, 9.05013], [0, 14.3872, 8.37411], [-10, 17.3205, 6.49719], [-12.4597, 7.19358, 8.37411], [-11.5019, 0, 9.05013], [-12.4597, -7.19358, 8.37411], [-10, -17.3205, 6.49719], [0, -14.3872, 8.37411], [5.75093, -9.9609, 9.05013], [12.4597, -7.19358, 8.37411],
    [19.4142, 0, 7.9114], [12.0947, 6.98289, 9.78832], [5.58249, 9.66915, 10.4643], [0, 13.9658, 9.78832], [-9.70711, 16.8132, 7.9114], [-12.0947, 6.98289, 9.78832], [-11.165, 0, 10.4643], [-12.0947, -6.98289, 9.78832], [-9.70711, -16.8132, 7.9114], [0, -13.9658, 9.78832], [5.58249, -9.66915, 10.4643], [12.0947, -6.98289, 9.78832],
    [18, 0, 8.49719], [11.2137, 6.47423, 10.3741], [5.17583, 8.96481, 11.0501], [0, 12.9485, 10.3741], [-9, 15.5885, 8.49719], [-11.2137, 6.47423, 10.3741], [-10.3517, 0, 11.0501], [-11.2137, -6.47423, 10.3741], [-9, -15.5885, 8.49719], [0, -12.9485, 10.3741], [5.17583, -8.96481, 11.0501], [11.2137, -6.47423, 10.3741],
    [0, 0, 15]
]


// über alle Arme
[
for (phi = [0: angleStep: ARMS * angleStep - 1])
    let (armX = rPosK * cos(phi))
    let (armY = rPosK * sin(phi))

    let (armStartAngle = phi - (180 - beta))

    // über den Arm
    for (i = [0: 1: armSteps - 1])
        let (phi2 = armStartAngle + i * armAngleStep)
        
        [armX + rK * cos(phi2), armY + rK * sin(phi2)],

    let (notchX = rPosN * cos(phi + angleStep / 2))
    let (notchY = rPosN * sin(phi + angleStep / 2))

    let (notchStartAngle = phi - (180 - beta))

    // über die Notch
    for (i = [0: 1: notchSteps - 1])
        let (phi2 = startAngle + i * armAngleStep)
        
        [armX + rK * cos(phi2), armY + rK * sin(phi2)]
];